class InvalidQuantityError(Exception):
    pass

class Product:
    def __init__(self, name, price):
        self.name = name
        self.price = price

class OrderItem:
    def __init__(self, product, quantity):
        self.product = product
        self._quantity = quantity

    @property
    def quantity(self):
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        if value < 1:
            raise InvalidQuantityError("Quantity must be at least 1")
        self._quantity = value

    def subtotal(self):
        return self.product.price * self.quantity

class Order:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def total(self):
        return sum(item.subtotal() for item in self.items)

# Example usage
p1 = Product("Keyboard", 45.00)
p2 = Product("Mouse", 20.00)

item1 = OrderItem(p1, 2)
item2 = OrderItem(p2, 3)

order = Order()
order.add_item(item1)
order.add_item(item2)

print(f"Order total: ${order.total()}")

try:
    item1.quantity = 0
except InvalidQuantityError as e:
    print("Error:", e)
